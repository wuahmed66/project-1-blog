CSS Grid: 
 1. justify-content: center; also works in CSS Grid. You assign the display:grid to the container much like Flex.
 2. As Grid is 2D, you can organise into rows and columns. 
 3. After setting the display property of your container div to grid, the next step is to set the rows and columns using properties: 
    .div {
        grid-template-columns: 35vw 35vw;
        grid-template-rows: 45vh 45vh;
        grid-gap: 15px; //seperation or 'gutter' between columns/rows
    }
4. The grid-area property specifies a particular area or set of rows/columns that a grid item occupies. 
    - an example of grid-area is:
    .div {
        grid-area: 1/2/3/3;
    }
    - Because grid-area is shorthand for the properties 'grid-row-start', 'grid-column-start', 'grid-row-end' and 'grid-column-end', 
      the code above places the item from rows 1-3 and columns 2-3.
5. ADVANCED GRID includes some new capabilities for large/complex grids. Such as: 
    - fr (takes up rest of available space.)
    - repeat() listings with notations
    - minmax() track sizing

CSS Flexbox:
1. To use flexbox, set the display property of a div to 'flex'. The items inside the element will also become flex items and allow you to use the flexbox syntax on them.
2. Justify content puts them in the middle.
3. To center containers try the following: 
    .container{
        display:flex;
        flex-direction: row;
        justify-content: center        
    }
4. To align items on the cross axis use 'align-items' with the possible values: 
    - stretch, flex-start, flex-end, center.
5. To justify content on the main axis, use 'justify-content' with the possible values: 
    - flex-start, flex-end, center, space-around, space-between, space-evenly.

CSS Grid vs CSS Flexbox Comparison: 
1. Grid is 2-dimensional while Flex is 1. 
2. Grid is layout first, Flex is content first. 
3. Grid is the app layout itself where as Flex is for the components of the app.